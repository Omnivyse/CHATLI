const nodemailer = require('nodemailer');
const crypto = require('crypto');

class EmailService {
  constructor() {
    this.transporter = null;
    this.initializeTransporter();
  }

  // Initialize email transporter
  initializeTransporter() {
    try {
      // Use Gmail SMTP with explicit configuration
      this.transporter = nodemailer.createTransport({
        host: 'smtp.gmail.com',
        port: 465,
        secure: true, // use SSL
        auth: {
          user: process.env.EMAIL_USER, // Your Gmail address
          pass: process.env.EMAIL_PASS  // Your Gmail app password
        }
      });

      console.log('‚úÖ Email service initialized');
    } catch (error) {
      console.error('‚ùå Email service initialization failed:', error);
      // Fallback to console logging for development
      this.transporter = null;
    }
  }

  // Generate verification token
  generateVerificationToken() {
    return crypto.randomBytes(32).toString('hex');
  }

  // Generate 5-digit verification code
  generateVerificationCode() {
    return Math.floor(10000 + Math.random() * 90000).toString();
  }

  // Create verification email HTML
  createVerificationEmailHTML(username, verificationCode) {
    return `
      <!DOCTYPE html>
      <html lang="mn">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>CHATLI - –ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç</title>
        <style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }
          
          body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
            line-height: 1.5;
            color: #1c1e21;
            background-color: #ffffff;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
          
          .email-container {
            max-width: 600px;
            margin: 0 auto;
            background-color: #ffffff;
            border-radius: 0;
            overflow: hidden;
          }
          
          .header {
            background-color: #ffffff;
            padding: 40px 32px 32px;
            text-align: center;
            border-bottom: 1px solid #e4e6ea;
          }
          
          .logo {
            font-size: 32px;
            font-weight: 700;
            color: #1c1e21;
            letter-spacing: -0.5px;
            margin-bottom: 8px;
          }
          
          .subtitle {
            font-size: 16px;
            color: #65676b;
            font-weight: 400;
            text-transform: uppercase;
            letter-spacing: 1px;
          }
          
          .content {
            padding: 32px;
            background-color: #ffffff;
          }
          
          .greeting {
            font-size: 18px;
            color: #1c1e21;
            margin-bottom: 24px;
            font-weight: 500;
          }
          
          .message {
            font-size: 16px;
            color: #65676b;
            line-height: 1.6;
            margin-bottom: 32px;
          }
          
          .code-container {
            background-color: #f0f2f5;
            border: 2px solid #e4e6ea;
            border-radius: 8px;
            padding: 24px;
            margin: 32px 0;
            text-align: center;
          }
          
          .code-label {
            font-size: 14px;
            color: #65676b;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-bottom: 16px;
            font-weight: 500;
          }
          
          .verification-code {
            font-size: 48px;
            font-weight: 700;
            color: #1c1e21;
            letter-spacing: 8px;
            font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
            line-height: 1;
          }
          
          .warning {
            background-color: #f0f2f5;
            border-left: 4px solid #1877f2;
            padding: 16px 20px;
            margin: 24px 0;
            border-radius: 0 8px 8px 0;
          }
          
          .warning-title {
            font-size: 14px;
            font-weight: 600;
            color: #1c1e21;
            margin-bottom: 8px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
          }
          
          .warning-text {
            font-size: 14px;
            color: #65676b;
            line-height: 1.5;
          }
          
          .footer {
            background-color: #f0f2f5;
            padding: 24px 32px;
            text-align: center;
            border-top: 1px solid #e4e6ea;
          }
          
          .footer-text {
            font-size: 12px;
            color: #65676b;
            margin-bottom: 8px;
          }
          
          .footer-copyright {
            font-size: 12px;
            color: #8e8e93;
          }
          
          @media only screen and (max-width: 600px) {
            .email-container {
              margin: 0;
              border-radius: 0;
            }
            
            .header {
              padding: 24px 20px 20px;
            }
            
            .content {
              padding: 20px;
            }
            
            .verification-code {
              font-size: 36px;
              letter-spacing: 6px;
            }
            
            .footer {
              padding: 20px;
            }
          }
        </style>
      </head>
      <body>
        <div class="email-container">
          <div class="header">
            <div class="logo">CHATLI</div>
            <div class="subtitle">–ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç</div>
          </div>
          
          <div class="content">
            <div class="greeting">–°–∞–π–Ω –±–∞–π–Ω–∞ —É—É, ${username}!</div>
            
            <div class="message">
              CHATLI –¥—ç—ç—Ä –±“Ø—Ä—Ç–≥—ç–ª “Ø“Ø—Å–≥—ç—Å—ç–Ω–¥ –±–∞—è—Ä–ª–∞–ª–∞–∞. –¢–∞–Ω—ã –∞–∫–∞—É–Ω—Ç—ã–≥ –∏–¥—ç–≤—Ö–∂“Ø“Ø–ª—ç—Ö–∏–π–Ω —Ç—É–ª–¥ –¥–æ–æ—Ä—Ö –∫–æ–¥—ã–≥ –æ—Ä—É—É–ª–Ω–∞ —É—É:
            </div>
            
            <div class="code-container">
              <div class="code-label">–ë–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –∫–æ–¥</div>
              <div class="verification-code">${verificationCode}</div>
            </div>
            
            <div class="warning">
              <div class="warning-title">–ê–Ω—Ö–∞–∞—Ä—É—É–ª–≥–∞</div>
              <div class="warning-text">
                –•—ç—Ä—ç–≤ —Ç–∞ —ç–Ω—ç –∏–º—ç–π–ª–∏–π–≥ —Ö“Ø–ª—ç—ç–Ω –∞–≤–∞–∞–≥“Ø–π –±–æ–ª, —Ç–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥ –±—É—Ä—É—É –±–∞–π–∂ –±–æ–ª–æ—Ö —é–º. –≠–Ω—ç –∫–æ–¥—ã–≥ 10 –º–∏–Ω—É—Ç—ã–Ω –¥–æ—Ç–æ—Ä –æ—Ä—É—É–ª–Ω–∞ —É—É.
              </div>
            </div>
          </div>
          
          <div class="footer">
            <div class="footer-text">–≠–Ω—ç –∏–º—ç–π–ª –∞–≤—Ç–æ–º–∞—Ç–∞–∞—Ä –∏–ª–≥—ç—ç–≥–¥—Å—ç–Ω. –•–∞—Ä–∏—É–ª–∂ –±–æ–ª–æ—Ö–≥“Ø–π.</div>
            <div class="footer-copyright">&copy; 2024 CHATLI. –ë“Ø—Ö —ç—Ä—Ö —Ö—É—É–ª–∏–∞—Ä —Ö–∞–º–≥–∞–∞–ª–∞–≥–¥—Å–∞–Ω.</div>
          </div>
        </div>
      </body>
      </html>
    `;
  }

  // Create verification email text version
  createVerificationEmailText(username, verificationCode) {
    return `
CHATLI - –ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç

–°–∞–π–Ω –±–∞–π–Ω–∞ —É—É, ${username}!

CHATLI –¥—ç—ç—Ä –±“Ø—Ä—Ç–≥—ç–ª “Ø“Ø—Å–≥—ç—Å—ç–Ω–¥ –±–∞—è—Ä–ª–∞–ª–∞–∞. –¢–∞–Ω—ã –∞–∫–∞—É–Ω—Ç—ã–≥ –∏–¥—ç–≤—Ö–∂“Ø“Ø–ª—ç—Ö–∏–π–Ω —Ç—É–ª–¥ –¥–æ–æ—Ä—Ö –∫–æ–¥—ã–≥ –æ—Ä—É—É–ª–Ω–∞ —É—É:

–ö–æ–¥: ${verificationCode}

–≠–Ω—ç –∫–æ–¥—ã–≥ 1 –º–∏–Ω—É—Ç—ã–Ω –¥–æ—Ç–æ—Ä –æ—Ä—É—É–ª–Ω–∞ —É—É. –•—É–≥–∞—Ü–∞–∞ –¥—É—É—Å—Å–∞–Ω—ã –¥–∞—Ä–∞–∞ —à–∏–Ω—ç –∫–æ–¥ —Ö“Ø—Å—ç—Ö –±–æ–ª–æ–º–∂—Ç–æ–π.

–ê–Ω—Ö–∞–∞—Ä—É—É–ª–≥–∞: –•—ç—Ä—ç–≤ —Ç–∞ —ç–Ω—ç –∏–º—ç–π–ª–∏–π–≥ —Ö“Ø–ª—ç—ç–Ω –∞–≤–∞–∞–≥“Ø–π –±–æ–ª, —Ç–∞–Ω—ã –∏–º—ç–π–ª —Ö–∞—è–≥ –±—É—Ä—É—É –±–∞–π–∂ –±–æ–ª–æ—Ö —é–º.

–≠–Ω—ç –∏–º—ç–π–ª –∞–≤—Ç–æ–º–∞—Ç–∞–∞—Ä –∏–ª–≥—ç—ç–≥–¥—Å—ç–Ω. –•–∞—Ä–∏—É–ª–∂ –±–æ–ª–æ—Ö–≥“Ø–π.

¬© 2024 CHATLI. –ë“Ø—Ö —ç—Ä—Ö —Ö—É—É–ª–∏–∞—Ä —Ö–∞–º–≥–∞–∞–ª–∞–≥–¥—Å–∞–Ω.
    `;
  }

  // Send verification email
  async sendVerificationEmail(email, username, verificationCode) {
    try {
      if (!this.transporter) {
        console.log('üìß Email service not available, logging instead');
        console.log('üìß Verification email would be sent to:', email);
        console.log('üìß Verification code:', verificationCode);
        console.log('üìß User can use this code for testing:', verificationCode);
        return { success: true, message: 'Email logged (service not configured)' };
      }
      
      const mailOptions = {
        from: `"CHATLI" <${process.env.EMAIL_USER}>`,
        to: email,
        subject: 'CHATLI - –ò–º—ç–π–ª –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç',
        html: this.createVerificationEmailHTML(username, verificationCode),
        text: this.createVerificationEmailText(username, verificationCode)
      };

      const result = await this.transporter.sendMail(mailOptions);
      
      console.log('‚úÖ Verification email sent successfully to:', email);
      return { success: true, messageId: result.messageId };
      
    } catch (error) {
      console.error('‚ùå Error sending verification email:', error);
      
      // Temporary workaround: Log the code for testing
      console.log('üìß TEMPORARY: Verification code for testing:', verificationCode);
      console.log('üìß User can use this code to verify their account');
      
      return { success: false, error: error.message };
    }
  }

  // Send password reset email (for future use)
  async sendPasswordResetEmail(email, username, resetToken) {
    try {
      if (!this.transporter) {
        console.log('üìß Password reset email would be sent to:', email);
        return { success: true, message: 'Email logged (service not configured)' };
      }

      const resetUrl = `${process.env.FRONTEND_URL || 'http://localhost:3000'}/reset-password?token=${resetToken}`;
      
      const mailOptions = {
        from: `"CHATLI" <${process.env.EMAIL_USER}>`,
        to: email,
        subject: 'CHATLI - –ù—É—É—Ü “Ø–≥ —Å—ç—Ä–≥—ç—ç—Ö',
        html: `
          <h2>–ù—É—É—Ü “Ø–≥ —Å—ç—Ä–≥—ç—ç—Ö</h2>
          <p>–°–∞–π–Ω –±–∞–π–Ω–∞ —É—É, ${username}!</p>
          <p>–¢–∞–Ω—ã –Ω—É—É—Ü “Ø–≥–∏–π–≥ —Å—ç—Ä–≥—ç—ç—Ö —Ö“Ø—Å—ç–ª—Ç —Ö“Ø–ª—ç—ç–Ω –∞–≤–ª–∞–∞. –î–æ–æ—Ä—Ö —Ö–æ–ª–±–æ–æ—Å—ã–≥ –¥–∞—Ä–∂ —à–∏–Ω—ç –Ω—É—É—Ü “Ø–≥—ç—ç –æ—Ä—É—É–ª–Ω–∞ —É—É:</p>
          <a href="${resetUrl}" style="background-color: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">–ù—É—É—Ü “Ø–≥ —Å—ç—Ä–≥—ç—ç—Ö</a>
          <p>–•—ç—Ä—ç–≤ —Ç–∞ —ç–Ω—ç —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ ”©–≥”©”©–≥“Ø–π –±–æ–ª —ç–Ω—ç –∏–º—ç–π–ª–∏–π–≥ “Ø–ª —Ö—ç—Ä—ç–≥—Å—ç—ç—Ä—ç–π.</p>
        `,
        text: `
–ù—É—É—Ü “Ø–≥ —Å—ç—Ä–≥—ç—ç—Ö

–°–∞–π–Ω –±–∞–π–Ω–∞ —É—É, ${username}!

–¢–∞–Ω—ã –Ω—É—É—Ü “Ø–≥–∏–π–≥ —Å—ç—Ä–≥—ç—ç—Ö —Ö“Ø—Å—ç–ª—Ç —Ö“Ø–ª—ç—ç–Ω –∞–≤–ª–∞–∞. –î–æ–æ—Ä—Ö —Ö–æ–ª–±–æ–æ—Å—ã–≥ –¥–∞—Ä–∂ —à–∏–Ω—ç –Ω—É—É—Ü “Ø–≥—ç—ç –æ—Ä—É—É–ª–Ω–∞ —É—É:

${resetUrl}

–•—ç—Ä—ç–≤ —Ç–∞ —ç–Ω—ç —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ ”©–≥”©”©–≥“Ø–π –±–æ–ª —ç–Ω—ç –∏–º—ç–π–ª–∏–π–≥ “Ø–ª —Ö—ç—Ä—ç–≥—Å—ç—ç—Ä—ç–π.
        `
      };

      const result = await this.transporter.sendMail(mailOptions);
      
      console.log('‚úÖ Password reset email sent successfully to:', email);
      return { success: true, messageId: result.messageId };
      
    } catch (error) {
      console.error('‚ùå Error sending password reset email:', error);
      return { success: false, error: error.message };
    }
  }

  // Test email service
  async testEmailService() {
    try {
      if (!this.transporter) {
        console.log('üìß Email service not configured');
        return false;
      }

      await this.transporter.verify();
      console.log('‚úÖ Email service is working correctly');
      return true;
    } catch (error) {
      console.error('‚ùå Email service test failed:', error);
      return false;
    }
  }
}

// Create singleton instance
const emailService = new EmailService();

module.exports = emailService; 